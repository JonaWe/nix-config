{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.myconf.services.headscale;
in {
  options.myconf.services.headscale = {
    enable = lib.mkEnableOption "Enable headscale service";
    port = lib.mkOption {
      type = lib.types.port;
      default = 443;
      example = 443;
      description = "Port that is used for headscale";
    };
    openFirewall = lib.mkOption {
      type = lib.types.bool;
      default = false;
      description = "Open firewall for headscale. Port 80, 443 and 3478 for STUN.";
    };
  };

  config = lib.mkIf cfg.enable {
    networking.firewall.allowedTCPPorts = lib.mkIf cfg.openFirewall [
      # 80
      443
    ];

    # networking.firewall.allowedUDPPorts = lib.mkIf cfg.openFirewall [
    #   3478
    #   41641
    # ];

    services.headscale = {
      enable = true;
      port = cfg.port;
      address = "0.0.0.0";
      settings = {
        tls_key_path = "/var/lib/acme/pinkorca.de/key.pem";
        tls_cert_path = "/var/lib/acme/pinkorca.de/cert.pem";
        server_url = "https://headscale.pinkorca.de";
        logtail.enabled = false;
        dns = {
          base_domain = "tail.net";
          extra_records = [
            {
              name = "*.ts.pinkorca";
              type = "A";
              value = "100.64.0.2";
            }
            {
              name = "*.ts.pinkorca";
              type = "AAAA";
              value = "fd7a:115c:a1e0::2";
            }
          ];
        };
        policy.path = pkgs.writeText "acl.json" (
          builtins.toJSON {
            randomizeClientPort = true; # direct connection opnsense?
            # hosts = {
            #
            # };
            groups = {
              "group:trusted" = [
                "Jona"
                "Noah"
                "Rahel"
                "Sofie"
              ];
              "group:vpn" = [
                "Jona"
                "Sofie"
              ];
            };
            acls = [
              {
                action = "accept";
                src = ["Jona"];
                dst = ["Jona:*"];
              }
              # {
              #   action = "accept";
              #   src = ["Jona"];
              #   dst = ["*:*"];
              # }
              {
                action = "accept";
                src = [
                  "group:trusted"
                ];
                dst = [
                  "Infra:*"
                ];
              }
              # {
              #   action = "accept";
              #   src = [
              #     "Infra:ant"
              #   ];
              #   dst = [
              #     "group:trusted:*"
              #   ];
              # }
              # {
              #   action = "accept";
              #   src = [
              #     "group:trusted"
              #   ];
              #   dst = [
              #     "Infra:ant:80"
              #     "Infra:ant:443"
              #   ];
              # }
              {
                action = "accept";
                src = [
                  "group:vpn"
                ];
                dst = ["autogroup:internet:*"]; # allow exit-nodes
              }
            ];
          }
        );
        # oidc = {
        #   # Block further startup until the OIDC provider is healthy and available
        #   only_start_if_oidc_is_available = "true";
        #   # Specified by your OIDC provider
        #   issuer = "https://your-oidc.issuer.com/path";
        #   # Specified/generated by your OIDC provider
        #   client_id = "your-oidc-client-id";
        #   client_secret = "your-oidc-client-secret";
        #   # alternatively, set `client_secret_path` to read the secret from the file.
        #   # It resolves environment variables, making integration to systemd's
        #   # `LoadCredential` straightforward:
        #   # client_secret_path = "${CREDENTIALS_DIRECTORY}/oidc_client_secret";
        #   # as third option, it's also possible to load the oidc secret from environment variables
        #   # set HEADSCALE_OIDC_CLIENT_SECRET to the required value
        #
        #   # Customize the scopes used in the OIDC flow, defaults to "openid", "profile" and "email" and add custom query
        #   # parameters to the Authorize Endpoint request. Scopes default to "openid", "profile" and "email".
        #   scope = ["openid" "profile" "email" "custom"];
        #   # Optional: Passed on to the browser login request â€“ used to tweak behaviour for the OIDC provider
        #   extra_params = {
        #     domain_hint = "example.com";
        #   };
        #
        #   # Optional: List allowed principal domains and/or users. If an authenticated user's domain is not in this list,
        #   # the authentication request will be rejected.
        #   allowed_domains = ["example.com"];
        #   # Optional. Note that groups from Keycloak have a leading '/'.
        #   allowed_groups = ["/headscale"];
        #   # Optional.
        #   # allowed_users:
        #   #   - alice@example.com
        # };
      };
      package = pkgs.headscale;
    };

    environment.systemPackages = [pkgs.headscale];

    sops.secrets."porkbun/api-key" = {};
    sops.secrets."porkbun/secret-api-key" = {};

    users.users.headscale.extraGroups = ["acme"];

    security.acme = {
      acceptTerms = true;
      defaults = {
        email = "dev@pinkorca.de";
        dnsProvider = "porkbun";
        reloadServices = ["headscale"];
        credentialFiles = {
          "PORKBUN_API_KEY_FILE" = config.sops.secrets."porkbun/api-key".path;
          "PORKBUN_SECRET_API_KEY_FILE" = config.sops.secrets."porkbun/secret-api-key".path;
        };
      };
      certs."pinkorca.de".extraDomainNames = [
        "headscale.pinkorca.de"
        "*.ts.pinkorca.de"
      ];
    };
  };
}
